@model Material_Control.Models.PendingApproval

@{
    ViewData["Title"] = "Add New Inventory Item";
}

<div class="container mt-4" ondom="searchIdWhenLoaded()">
    <h3 class="bg-success text-white text-center p-2 rounded">Add New Inventory Item</h3>

    <form id="createForm" asp-action="Create" asp-controller="Home">
        @Html.AntiForgeryToken()

        <!-- Search Section -->
        <div class="row mb-3">
            <div class="col-md-4">
                <label for="searchId" class="form-label">Search Identification No</label>
                <div class="input-group">
                    <input type="text" id="searchId" class="form-control" placeholder="Enter ID to search">
                    <button type="button" class="btn btn-primary" onclick="searchIdentificationNo()">Search</button>
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-4">
                <label asp-for="IdentificationNo" class="form-label">Identification No</label>
                <input type="text" class="form-control" id="IdentificationNo" name="IdentificationNo" value="@Model.IdentificationNo" />
            </div>
            <div class="col-md-4">
                <label asp-for="ItemPart" class="form-label">Item Part</label>
                <input asp-for="ItemPart" class="form-control" />
                <span asp-validation-for="ItemPart" class="text-danger"></span>
            </div>
            <div class="col-md-4">
                <label asp-for="CodePart" class="form-label">Code Part</label>
                <input asp-for="CodePart" class="form-control" />
                <span asp-validation-for="CodePart" class="text-danger"></span>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-4">
                <label asp-for="Quantity" class="form-label">Quantity</label>
                <input asp-for="Quantity" type="number" class="form-control" />
                <span asp-validation-for="Quantity" class="text-danger"></span>
            </div>
            <div class="col-md-4">
                <label asp-for="StorageLocation" class="form-label">Storage Location</label>
                <input asp-for="StorageLocation" class="form-control" />
                <span asp-validation-for="StorageLocation" class="text-danger"></span>
            </div>
            <div class="col-md-4">
                <label asp-for="Purpose" class="form-label">Purpose</label>
                <input asp-for="Purpose" class="form-control" />
                <span asp-validation-for="Purpose" class="text-danger"></span>
            </div>
        </div>

        <div class="col-md-4">
            <label asp-for="PIC" class="form-label">PIC</label>
            <input asp-for="PIC" class="form-control" value="@ViewBag.PICName" readonly />
        </div>

        <div class="mt-3">
            <input type="hidden" name="mode" value="@ViewBag.Mode" />
            <input type="hidden" id="RequestType" name="RequestType" />
            <button type="button" onclick="submitForm('IN')" class="btn btn-success">IN</button>
            <button type="button" onclick="submitForm('OUT')" class="btn btn-danger">OUT</button>
            <button type="button" onclick="submitForm('SCRAP')" class="btn btn-warning">SCRAP</button>
            <a asp-action="Index" class="btn btn-secondary ms-2">Back</a>
            <button type="button" onclick="downloadDocument()" class="btn btn-info ms-2">Download PDF</button>
        </div>
    </form>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script>
         // document.addEventListener("DOMContentLoaded", function(){
        function submitForm(requestType) {
    if (requestType === 'SCRAP') {
        const id = document.getElementById("IdentificationNo").value;
        if (!id) return alert("Please provide an Identification No to delete.");

        // Konfirmasi sebelum menghapus
        if (confirm("Are you sure you want to scrap this item? This will delete the data.")) {
            fetch(`/Home/Delete?id=${encodeURIComponent(id)}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
            .then(response => {
                if (response.ok) {
                    alert("Item successfully scrapped (deleted).");
                    window.location.href = '/Home/Index'; // Redirect jika perlu
                } else {
                    return response.text().then(text => { throw new Error(text); });
                }
            })
            .catch(error => {
                alert("Error deleting item: " + error.message);
            });
        }
    } else {
        document.getElementById("RequestType").value = requestType;

        const statusInput = document.createElement("input");
        statusInput.type = "hidden";
        statusInput.name = "Status";
        statusInput.value = "Pending at Admin";
        document.forms[0].appendChild(statusInput);
        document.forms[0].submit();
    }
}


        function searchIdentificationNo() {
                const params = new URLSearchParams(window.location.search);

            const id = document.getElementById("searchId").value || params.get("id");

            if (!id) return alert("Please enter an Identification No.");

            fetch(`/Home/GetItemById?id=${id}`)
                .then(response => {
                    if (!response.ok) throw new Error("Item not found.");
                    return response.json();
                })
                .then(data => {
                    document.getElementById("IdentificationNo").value = data.identificationNo || '';
                    document.querySelector('[name="ItemPart"]').value = data.itemPart || '';
                    document.querySelector('[name="CodePart"]').value = data.codePart || '';
                    document.querySelector('[name="Quantity"]').value = data.quantity || '';
                    document.querySelector('[name="StorageLocation"]').value = data.storageLocation || '';
                    document.querySelector('[name="Purpose"]').value = data.purpose || '';
                    document.querySelector('[name="PIC"]').value = data.pic || '';
                })
                .catch(err => {
                    alert(err.message);
                });
        }

                   function downloadDocument() {
            const id = document.getElementById("IdentificationNo").value;
            if (!id) return alert("Please search and fill in the Identification No first.");

            fetch(`/Documents/DeliveryProof?id=${encodeURIComponent(id)}`)
                .then(response => {
                    if (response.ok) {
                        return response.blob();
                    } else {
                        return response.text().then(text => {
                            throw new Error(text || 'File not found');
                        });
                    }
                })
                .then(blob => {
                    const url = URL.createObjectURL(blob);
                    const link = document.createElement('a');
                    link.href = url;
                    link.download = `document_${id}.pdf`;
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                    URL.revokeObjectURL(url);
                })
                .catch(error => {
                    alert('Error downloading the file: ' + error.message);
                });
        }

                function hasQueryParams(url) {
          try {
            const parsedUrl = new URL(url);
            return parsedUrl.search.length > 1;
          } catch (error) {
            console.error("Invalid URL:", error);
            return false;
          }
        }
      
        function searchIdWhenLoaded() {
            console.log('test')
            if(hasQueryParams(window.location.href)){
                    searchIdentificationNo()
                }
        }

        window.onload = function() {
            searchIdWhenLoaded()
        }
        // })

    </script>
}
